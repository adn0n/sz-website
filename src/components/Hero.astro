<section id="mainContent" class="relative w-[99%] mx-auto bg-[#a88b5f] h-[90vh] rounded-3xl p-12 flex items-center justify-center">
    <div id="preloader" class="absolute inset-0 z-10 flex items-center justify-center rounded-3xl">
        <canvas id="modelCanvas" class="relative w-[99%] mx-auto bg-[#a88b5f] h-[90vh] rounded-3xl p-12 flex items-center justify-center"></canvas>
    </div>    

    <div class="container mx-auto px-4 text-center hidden" id="heroContent">
        <h1 class="text-5xl font-bold text-white mb-6">
            <span class="inline-block animate-text-reveal" style="--delay: 0s">TraderSZ</span>
            <span class="inline-block animate-text-reveal" style="--delay: 0.5s">Coin</span>
        </h1>
        <p class="text-2xl text-white/80 max-w-2xl mx-auto mb-8">
            Community-driven charity backed by tradersz, greatest trader xyz
        </p>
        
        <div class="flex justify-center gap-8 animate-fade-up">
            <div class="bg-white/10 p-6 rounded-xl backdrop-blur-sm">
                <h3 class="text-white mb-2">Token Address</h3>
                <div class="flex items-center gap-2">
                    <code class="text-white/90 bg-white/5 p-2 rounded">HMx1sy5XQ4GmnLYCJ21Ldnv1A3boGRFHgKzLm52ypump</code>
                    <button 
                        class="bg-white/20 p-2 rounded hover:bg-white/30 transition-colors"
                        onclick="navigator.clipboard.writeText('HMx1sy5XQ4GmnLYCJ21Ldnv1A3boGRFHgKzLm52ypump')"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                    </button>
                </div>
            </div>
            
            <div class="bg-white/10 p-6 rounded-xl backdrop-blur-sm">
                <h3 class="text-white mb-2">Market Cap</h3>
                <p class="text-white/90" id="marketCap">
                    <svg class="animate-spin h-5 w-5 text-white mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </p>
            </div>
        </div>
    </div>
</section>

<script>
    import * as THREE from 'three';
    import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';

    const section = document.getElementById('mainContent');
    const canvas = document.getElementById('modelCanvas') as HTMLCanvasElement;
    
    // Get section dimensions
    const sectionRect = section?.getBoundingClientRect();
    const width = sectionRect?.width || window.innerWidth;
    const height = sectionRect?.height || window.innerHeight;

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xa88b5f); 

    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
    renderer.setSize(width, height);

    // Add lights
    const ambientLight = new THREE.AmbientLight(0xffffff, 2);
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffd700, 3);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    const pointLight1 = new THREE.PointLight(0xffd700, 8);
    pointLight1.position.set(-5, 0, 5);
    scene.add(pointLight1);

    const pointLight2 = new THREE.PointLight(0xffd700, 8);
    pointLight2.position.set(5, 0, -5);
    scene.add(pointLight2);

    camera.position.z = 10;

    // Cube fallback
    const geometry = new THREE.BoxGeometry();
    const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
    const cube = new THREE.Mesh(geometry, material);
    scene.add(cube);

    function animateCube() {
        requestAnimationFrame(animateCube);
        cube.rotation.y += 0.008;
        renderer.render(scene, camera);
    }
    animateCube();

    // Load model
    console.log('Starting to load model...');
    const loader = new GLTFLoader();
    loader.load(
        '/models/scene.gltf',
        (gltf) => {
            console.log('Model loaded successfully');
            const model = gltf.scene;
            scene.remove(cube);
            
            model.traverse((child) => {
                if ((child as THREE.Mesh).isMesh && (child as THREE.Mesh).material) {
                    if ('metalness' in (child as THREE.Mesh).material) {
                        const material = (child as THREE.Mesh).material as THREE.MeshStandardMaterial;
                        material.metalness = 1.0;
                        material.roughness = 0.1;
                        material.envMapIntensity = 3;
                        material.color.setHex(0xffd700);
                    }
                }
            });

            model.scale.set(0.8, 0.8, 0.8);
            
            model.position.set(0, 0, 0);
            model.rotation.set(0, Math.PI / 2, 0);
            
            scene.add(model);

            camera.position.set(0, 0, 15);
            
            function animate() {
                requestAnimationFrame(animate);
                model.rotation.y += 0.012;
                renderer.render(scene, camera);
            }
            animate();

            setTimeout(() => {
                document.getElementById('preloader')?.classList.add('opacity-0', 'pointer-events-none');
                document.getElementById('heroContent')?.classList.remove('hidden');
                document.getElementById('preloader')?.addEventListener('transitionend', () => {
                    document.getElementById('preloader')?.classList.add('hidden');
                });
            }, 1500);
        },
        (progress) => console.log('Loading:', (progress.loaded / progress.total * 100) + '%'),
        (error) => console.error('Error:', error)
    );

    // Update resize handler
    window.addEventListener('resize', () => {
        const newRect = section?.getBoundingClientRect();
        const newWidth = newRect?.width || window.innerWidth;
        const newHeight = newRect?.height || window.innerHeight;
        
        camera.aspect = newWidth / newHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(newWidth, newHeight);
    });

    async function fetchMarketCap() {
        try {
            const response = await fetch('https://api.dexscreener.com/latest/dex/tokens/HMx1sy5XQ4GmnLYCJ21Ldnv1A3boGRFHgKzLm52ypump');
            const data = await response.json();
            const marketCap = data?.pairs?.[0]?.fdv || 'N/A';
            const marketCapElement = document.getElementById('marketCap');
            if (marketCapElement) {
                marketCapElement.textContent = `$${Math.round(marketCap * 0.49).toLocaleString()}`;
            }
        } catch (error) {
            console.error('Error fetching market cap:', error);
            const marketCapElement = document.getElementById('marketCap');
            if (marketCapElement) {
                marketCapElement.textContent = 'Unable to load';
            }
        }
    }

    fetchMarketCap();
</script>

<style>
    #preloader {
        transition: opacity 0.3s ease-out;
    }

    @keyframes fade-up {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fade-up {
        animation: fade-up 0.6s ease-out forwards;
    }

    @keyframes text-reveal {
        0% {
            opacity: 0;
            filter: blur(8px);
        }
        10% {
            opacity: 1;
            filter: blur(8px);
        }
        100% {
            opacity: 1;
            filter: blur(0px);
        }
    }

    .animate-text-reveal {
        opacity: 0;
        animation: text-reveal 0.7s ease-out forwards;
        animation-delay: var(--delay);
    }
    
</style>